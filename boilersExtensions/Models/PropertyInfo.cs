using System.Collections.Generic;
using Microsoft.CodeAnalysis;

namespace boilersExtensions.Models
{
    /// <summary>
    ///     Entity Frameworkのエンティティプロパティに関する情報を格納するクラス
    /// </summary>
    public class PropertyInfo
    {
        /// <summary>
        ///     プロパティ名
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///     プロパティの型名（文字列表現）
        /// </summary>
        public string TypeName { get; set; }

        /// <summary>
        ///     完全修飾型名（名前空間を含む）
        /// </summary>
        public string FullTypeName { get; set; }

        /// <summary>
        ///     プロパティの型シンボル（Roslyn解析時の情報）
        /// </summary>
        public ITypeSymbol TypeSymbol { get; set; }

        /// <summary>
        ///     プロパティシンボル（Roslyn解析時の情報）
        /// </summary>
        public IPropertySymbol Symbol { get; set; }

        /// <summary>
        ///     データベースのカラム名（Column属性から取得、なければプロパティ名）
        /// </summary>
        public string ColumnName { get; set; }

        /// <summary>
        ///     このプロパティが主キーかどうか
        /// </summary>
        public bool IsKey { get; set; }

        /// <summary>
        ///     このプロパティが必須かどうか（Required属性または非Nullableから判断）
        /// </summary>
        public bool IsRequired { get; set; }

        /// <summary>
        ///     このプロパティが自動生成値かどうか（DatabaseGenerated属性から判断）
        /// </summary>
        public bool IsAutoGenerated { get; set; }

        /// <summary>
        ///     このプロパティが外部キーかどうか
        /// </summary>
        public bool IsForeignKey { get; set; }

        /// <summary>
        ///     外部キーの場合、参照先エンティティ名
        /// </summary>
        public string ForeignKeyTargetEntity { get; set; }

        /// <summary>
        ///     外部キーの場合、参照先プロパティ名
        /// </summary>
        public string ForeignKeyTargetProperty { get; set; }

        /// <summary>
        ///     このプロパティがナビゲーションプロパティかどうか
        /// </summary>
        public bool IsNavigationProperty { get; set; }

        /// <summary>
        ///     ナビゲーションプロパティの場合、コレクション型かどうか（1対多の「多」側）
        /// </summary>
        public bool IsCollection { get; set; }

        /// <summary>
        ///     コレクション型の場合、要素の型名
        /// </summary>
        public string CollectionElementType { get; set; }

        /// <summary>
        ///     プロパティの最大長（StringLength属性またはMaxLength属性から取得）
        /// </summary>
        public int? MaxLength { get; set; }

        /// <summary>
        ///     プロパティの最小長（MinLength属性から取得）
        /// </summary>
        public int? MinLength { get; set; }

        /// <summary>
        ///     数値型の場合、指定された最小値
        /// </summary>
        public double? MinValue { get; set; }

        /// <summary>
        ///     数値型の場合、指定された最大値
        /// </summary>
        public double? MaxValue { get; set; }

        /// <summary>
        ///     このプロパティに適用されている正規表現パターン（RegularExpression属性から取得）
        /// </summary>
        public string RegexPattern { get; set; }

        /// <summary>
        ///     プロパティに設定された説明・コメント
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        ///     プロパティにデフォルト値が設定されているか
        /// </summary>
        public bool HasDefaultValue { get; set; }

        /// <summary>
        ///     デフォルト値（文字列表現）
        /// </summary>
        public string DefaultValue { get; set; }

        /// <summary>
        ///     このプロパティがEnum型かどうか
        /// </summary>
        public bool IsEnum { get; set; }

        /// <summary>
        ///     Enum型の場合の値情報（名前と数値のペア）
        /// </summary>
        public List<EnumValueInfo> EnumValues { get; set; } = new List<EnumValueInfo>();

        /// <summary>
        ///     Enum型がFlags属性を持つかどうか
        /// </summary>
        public bool IsEnumFlags { get; set; }

        /// <summary>
        ///     このプロパティがシャドウプロパティかどうか
        /// </summary>
        public bool IsShadowProperty { get; set; }

        /// <summary>
        ///     シードデータ生成時にこのプロパティを除外するかどうか
        /// </summary>
        public bool ExcludeFromSeed { get; set; }

        /// <summary>
        ///     シードデータ生成時に使用するカスタムジェネレーター情報
        /// </summary>
        public string CustomGenerator { get; set; }

        /// <summary>
        ///     このプロパティの型がシステム型（プリミティブ型や組み込み型）かどうか
        /// </summary>
        public bool IsSystemType { get; set; }

        /// <summary>
        ///     このプロパティの型がNullableかどうか
        /// </summary>
        public bool IsNullable { get; set; }

        /// <summary>
        ///     Nullable型の場合、基本型の名前
        /// </summary>
        public string UnderlyingTypeName { get; set; }

        /// <summary>
        ///     特定の属性がプロパティに適用されているかどうかをチェック
        /// </summary>
        public bool HasAttribute(string attributeName)
        {
            if (Symbol == null)
            {
                return false;
            }

            foreach (var attr in Symbol.GetAttributes())
            {
                if (attr.AttributeClass.Name == attributeName ||
                    attr.AttributeClass.Name == attributeName + "Attribute")
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        ///     ToString()のオーバーライド
        /// </summary>
        public override string ToString() => $"{Name} ({TypeName}{(IsNullable ? "?" : "")})";
    }

    /// <summary>
    ///     Enum型の値情報を格納するクラス
    /// </summary>
    public class EnumValueInfo
    {
        /// <summary>
        ///     Enum値の名前
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///     Enum値の数値
        /// </summary>
        public int Value { get; set; }

        /// <summary>
        ///     Enum値に関連付けられた説明・コメント
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        ///     ToString()のオーバーライド
        /// </summary>
        public override string ToString() => $"{Name} = {Value}";
    }
}